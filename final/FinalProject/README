# CSE210 Final Project - Automated Report Emailer

## Overview

This project is the final assignment for the CSE210 course. It's designed to automate the process of generating a weekly sales report from a database, creating an Excel file, and sending it via email to a specified address. The project consists of a combination of Python and C# code.

## Features

- **Python Script (`main.py`):**
  - Generates a weekly sales report by executing a provided SQL query on a database.
  - Saves the report as an Excel file (`report.xlsx`).

- **C# Application (`FinalProject`):**
  - Reads the Excel file generated by the Python script.
  - Sends the report as an email attachment using SMTP.

## Configuration

To run the project successfully, follow these steps:

### Python Configuration (`main.py`)

1. Open the `main.py` file in a text editor.
2. Provide the necessary database connection details:
   - `host`: Hostname of the database server.
   - `user`: Database username.
   - `password`: Database password.
   - `database`: Name of the database.
   - `query`: SQL query to retrieve the required sales data.

### C# Configuration (`Program.cs`)

1. Open the `Program.cs` file in a text editor.
2. Configure the email connection details in the `EmailConnection` class:
   - `Host`: SMTP server hostname.
   - `Port`: Port number for SMTP (adjust if necessary).
   - `User`: Email address used for authentication.
   - `Password`: Password for email authentication.

## Execution

1. Run the Python script (`main.py`) to generate the Excel report.
2. Compile and run the C# application (`FinalProject`) to process the report and send it via email.
3. Follow the console prompts for any additional user input (e.g., recipient email address).

## Logging

- Successful email deliveries are logged in the `log.txt` file.

## Dependencies

- Python 3.x
- C# Compiler
- Appropriate Python libraries installed (`pandas`, `openpyxl`)
- Internet connectivity for sending emails via SMTP

## Notes

- Ensure that your firewall allows outgoing SMTP traffic.
- Protect sensitive information such as database credentials and email passwords.
- This project assumes a successful connection to the database and SMTP server.
